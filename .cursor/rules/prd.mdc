---
description: Product Requirements Document
globs: 
alwaysApply: true
---
# DinnerNotOnYourOwn.com

**Product Vision:** 
A practical tool for conference attendees to coordinate dinner plans in Salt Lake City, demonstrating the power of rapid development using modern tools.

## Roadmap
[] Phase 1
[] Phase 2
[] Phase 3
[] Phase 4
[] Phase 5

Notes:

## Implementation plan

### Phase 1 - Project Setup
1. Pull the latest Epic Stack with `npx create-epic-app@latest`
2. Make the app our own
  2.1. Update Any references to Epic Notes to our app name
  2.2. Update any email templates to use our domain (make sure we no longer send any emails from the epicstack.dev domain, but rather send from our new domain)
3. Add required API Keys (look at the [Required APIs](mdc:#required-apis))
  3.1. Add required placeholders to .env.example (because it is used for tests)
  3.2. Add required placeholders to .env and ask me to update them with real values
  3.2. Once I've added the real keys to .env, deploy them to Fly with `fly secrets set`
4. Push the changes above to Github
5. Connect to our custom domain via Cloudflare

### Phase 2 - Data Fetching & Storage
- Add required models to Prisma schema (look at [Database Schema](mdc:#database-schema))
- Create reusable Prisma queries
- Implement API integrations (look at the [Required APIs](mdc:#required-apis))
- Add required Resource routes (look at [Core Features](mdc:#core-features))

### Phase 3 - UI Development
- Ensure UI has all core features

### Phase 4 - Polish
- Ensure mobile responsiveness
- Add loading state
- Add optmistic UI
- Update email templates to use corect domain and content, and their tests

### Phase 5 - Test
- Add an e2e test for the main user flow for the happy path
- Add integration and unit tests for the most critical units of code - maximise coverage without adding too much code 

## Core Features

### 1. Restaurant Discovery
- Display key restaurant information:
  - Name, cuisine type, price range, rating
  - Walking distance from your location (or the venue if live location is not avilable) (in minutes)
  - Address and basic contact info
  - Direct link to restaurant website/menu if available
  - Google Maps link for easy navigation
- Simple filtering options:
  - Distance (0.5mi, 1mi, 2mi)
  - Rating (above 1, 2, 3, 4 or 5 stars)
  - Price range ($ to $$$)
  - Cuisine type (quick filters for popular options)
- Two main views:
  - Map view:
    - Interactive map with restaurant pins - the pins should show the attendee count on them
    - The restaurant you are attending should be green
    - Your current location (or venue location as fallback)
    - The live location marker on the map should a koala emoji
  - List view: 
    - Filterable list with restaurant cards
- Persistent header with:
  - Countdown timer 'until you have dinner on your own'
  - Quick filter toggle buttons

### 2. Attendee Coordination
- "Join dinner" button for each restaurant
- Display real-time count of attendees going to each place
- Once attending a dinner group
  - you can add a small note/comment ("Meeting in lobby at 7pm") that other attendees can see
  - you can leave the dinner group 
  - you can only be a part of one dinner group at a time

## Technical Implementation

### Database Schema
- **Restaurants** (cached from API):
  - id, name, address, cuisineType, priceLevel, rating, lat, lng, photoUrl, mapsUrl, websiteUrl
- **DinnerGroups**:
  - id, restaurantId, notes, createdAt
- **Attendees**:
  - id, userId, dinnerGroupId, createdAt

### Required APIs 
- Google Places API to find restaurants near the users current location 
  - set up caching to avoid API rate limits
  - use resource routes as a proxy to keep the api key secure
- Users will sign up via email which is provided by the Resend API

### UI
- have a dashboard route
- show a list view or a map view
- the list view and map view should respond to filter toggles

### Deployment
- Custom domain is dinnernotonyourown.com, provided by Cloudflare


## Technical Information

### Tech Stack
- **Foundation:** Kent C. Dodds' Epic Stack
- **Frontend:**
  - React
  - Tailwind CSS
  - shadcn/ui and Radix UI
  - Zod schema validation
  - Conform form handling
  - remix-flat-routes file based routing
- **Backend:** 
  - React Router 7
  - Server loaders, actions and resource routes
- **Database:** 
  - SQLite
  - Prisma ORM with TypedSQL support
- **Authentication:** 
  - Custom Epic Stack auth with:
    - Email
    - Github Oauth
    - Passkeys
- **Deployment:** 
  - Fly.io
  - Cloudflare DNS provider
- **Other**
  - Resend for emails
  - Sentry for bug monitoring

### Established rules and patterns
#### General
- Use react router 7 - do not use Remix imports
  - returning json({}) from server functions is also deprecated, you can return the object directly
  - use resource routes for endpoints

#### File structure
- Use '#app/..' imports instead of relative imports
- reusable db queries live in utils/
- place external APIs in utils/providers

#### User Interface
- Clean, responsive design using shadcn/ui components
- Mobile-first approach
- Implement new feature route/s in users/$user/
- Centralize shared components 
  - add organism components to /componenets
  - add atoms and molecules to /components/ui
- Loading states and optimistic UI should use suspense and promise responses from the server functions
- Use shadcn components where possible. Only import new radix primitives when needed. Avoid importing radix components directly - they should only be used as part of components in components/ui and used in the app from there

#### Other
-  Add any new/custom patterns here